AC_INIT(configure.ac)

dnl ----------------------------
dnl Automake/autoconf input file
dnl ----------------------------

GLIB_REQUIRED=2.10.0
GNUTLS_REQUIRED=1.4.0

dnl --- Package configuration ---

AM_INIT_AUTOMAKE(flow, 0.1.0)
AM_CONFIG_HEADER(config.h)

AC_SUBST(VERSION)
AC_SUBST(PACKAGE)

AC_DEFINE_UNQUOTED(VERSION, "$VERSION", [Package version])
AC_DEFINE_UNQUOTED(PACKAGE, "$PACKAGE", [Package name])

dnl --- Standard checks ---

AM_SANITY_CHECK
AM_MAINTAINER_MODE
AC_CANONICAL_HOST

AC_C_CONST
AC_ISC_POSIX
AC_PROG_CC
AC_PROG_INSTALL
AM_DISABLE_STATIC
AM_PROG_LIBTOOL

dnl --- Dependency checks ---

PKG_CHECK_MODULES(BASE, \
    glib-2.0 >= $GLIB_REQUIRED
    gobject-2.0 >= $GLIB_REQUIRED
    gthread-2.0 >= $GLIB_REQUIRED
    gnutls >= $GNUTLS_REQUIRED)

# The check is likely redundant, but this defines GLIB_GENMARSHAL,
# GLIB_MKENUMS and GOBJECT_QUERY for us:

AM_PATH_GLIB_2_0($GLIB_REQUIRED, :,
  AC_MSG_ERROR([
*** GLib $GLIB_REQUIRED or newer is required. The latest version of
*** GLib is always available from ftp://ftp.gtk.org/pub/gtk/.]),
  gobject gthread)

GTK_DOC_CHECK([1.4])

dnl --- OS capabilities ---

# Define a MAINT-like variable REBUILD which is set if Perl
# is found, so autogenerated sources can be rebuilt.

AC_PATH_PROGS(PERL, perl5 perl)

REBUILD=\#
if test "x$enable_rebuilds" = "xyes" && \
  test -n "$PERL" && \
  $PERL -e 'exit !($] >= 5.002)' > /dev/null 2>&1 ;
then
  REBUILD=
fi

AC_SUBST(REBUILD)

# IPv6 (HAVE_IPV6)

AC_CACHE_CHECK([for IPv6], flow_cv_hasipv6,[
    AC_COMPILE_IFELSE([AC_LANG_SOURCE([
        #include <sys/types.h>
        #include <sys/socket.h>
        #include <netinet/in.h>
        #include <arpa/inet.h>
        int main () {
        struct sockaddr_in6 *sa6_ptr;
        int family = AF_INET6; }
        ])],
    flow_cv_hasipv6=yes,
    flow_cv_hasipv6=no,)
])

case x$flow_cv_hasipv6 in
    xyes) AC_DEFINE(HAVE_IPV6, 1, [Have IPv6])
esac

# getaddrinfo (HAVE_GETADDRINFO)

AC_CACHE_CHECK([for getaddrinfo], flow_cv_hasgetaddrinfo,[
    AC_COMPILE_IFELSE([AC_LANG_SOURCE([
        #include <sys/types.h>
        #include <sys/socket.h>
        #include <netdb.h>
        int main () {
        struct addrinfo  hints;
        struct addrinfo *res = NULL;
        const char *name = "test";
        hints.ai_socktype = SOCK_STREAM;
        getaddrinfo (name, NULL, &hints, &res);
        if (res) freeaddrinfo (res); }
        ])],
    flow_cv_hasgetaddrinfo=yes,
    flow_cv_hasgetaddrinfo=no,)
])

case x$flow_cv_hasgetaddrinfo in
    xyes) AC_DEFINE(HAVE_GETADDRINFO, 1, [Have getaddrinfo])
esac

# inet_ntop

AC_CACHE_CHECK([for inet_ntop], flow_cv_hasntop,[
    AC_COMPILE_IFELSE([AC_LANG_SOURCE([
        #include <sys/types.h>
        #include <sys/socket.h>
        #include <arpa/inet.h>
        int main () {
	char *src;
        char *dest;
        const char *ret;
        ret = inet_ntop (AF_INET, src, dest, 64); }
        ])],
    flow_cv_hasntop=yes,
    flow_cv_hasntop=no,)
])

case x$flow_cv_hasntop in
    xyes) AC_DEFINE(HAVE_INET_NTOP, 1, [Have inet_ntop])
esac

# inet_pton

AC_CACHE_CHECK([for inet_pton], flow_cv_haspton,[
    AC_COMPILE_IFELSE([AC_LANG_SOURCE([
        #include <sys/types.h>
        #include <sys/socket.h>
        #include <arpa/inet.h>
        int main () {
	char *src;
        char *dest;
        int ret;
        ret = inet_pton (AF_INET, src, dest); }
        ])],
    flow_cv_haspton=yes,
    flow_cv_haspton=no,)
])

case x$flow_cv_haspton in
    xyes) AC_DEFINE(HAVE_INET_PTON, 1, [Have inet_pton])
esac

dnl --- Set compiler flags ---

BASE_CFLAGS="$BASE_CFLAGS -Wall"
FLOW_LIBS="$BASE_LIBS"
FLOW_CFLAGS="$BASE_CFLAGS"

AC_SUBST(FLOW_LIBS)
AC_SUBST(FLOW_CFLAGS)

dnl --- Output ---

AC_OUTPUT(Makefile                \
          flow/Makefile           \
          test/Makefile           \
          example/Makefile        \
	  doc/Makefile		  \
	  doc/reference/Makefile  \
	  doc/reference/version.xml \
          flow/flow.pc            \
          flow.spec)
